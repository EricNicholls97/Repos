
import random
import tkinter as tk


class Game:
    """This class represents the game itself, and contains the main
    game loop, as well as the game's user interface and behavior.
    """
    def __init__(self, root):
        """
        Constructor for the Game class
        Parameters:
            root (Tk): The root tkinter object for the game
        """
        self.root = root
        self.canvas = tk.Canvas(root, width=1000, height=800, bg='white')
        self.canvas.pack()

        self.click_amount = 0.5

        # Create the player circle
        self.player = Circle(self.canvas, 500, 400, 20, "blue", 100)
        self.player.draw()

        # List of all circles in the game, including the player
        self.existing_circles = [self.player]

        # Add some random circles to the game
        for _ in range(20):
            self.existing_circles.append(Circle(self.canvas, random.randint(100, 900), random.randint(100, 700), 20, "gray", random.randint(1,50)))
            self.existing_circles[-1].draw()

        # Currently selected circle
        self.selected_circle = None

        # Add a binding to the left mouse button for selecting circles
        self.root.bind("<Button-1>", self.select_circle)

    def select_circle(self, event):
        """
        Selects a circle when the left mouse button is pressed
        Parameters:
            event (Event): The event object generated by the mouse click
        """
        for circle in self.existing_circles:
            distance = ((event.x - circle.x) ** 2 + (event.y - circle.y) ** 2) ** 0.5
            if distance < circle.radius:
                if self.selected_circle is None:
                    if circle.color == "blue":
                        self.selected_circle = circle
                else:
                    if circle.color != "blue" and circle != self.selected_circle:
                        amount = int(self.selected_circle.number * self.click_amount)
                        self.selected_circle.number -= amount
                        circle.number -= amount
                        if circle.number <= 0:
                            circle.number *= -1
                            circle.color = "blue"
                            circle.canvas.itemconfigure(circle.circle_id, fill=circle.color)
                        
                        self.selected_circle.draw()
                        circle.draw()
                        self.selected_circle = None
                break


class Circle:
    """ This class represents a circle on the game board """
    def __init__(self, canvas, x, y, radius, color, number):
        """
        Constructor for the Circle class
        Parameters:
            canvas (Canvas): The canvas object on which to draw the circle
            x (int): The x-coordinate of the center of the circle
            y (int): The y-coordinate of the center of the circle
            radius (int): The radius of the circle
            color (str): The color of the circle
            number (int): The number of units in the circle
        """
        self.canvas = canvas
        self.x = x
        self.y = y
        self.radius = radius
        self.color = color
        self.number = number
        self.circle_id = canvas.create_oval(x-radius, y-radius, x+radius, y+radius, fill=color)
        self.text_id = canvas.create_text(x, y, text=str(number), fill='white')
        self.selected = False

    def draw(self):
        """ Redraws the circle on the canvas"""
        self.canvas.itemconfigure(self.circle_id, fill=self.color)
        self.canvas.itemconfigure(self.text_id, text=str(self.number))
        if self.selected:
            self.canvas.itemconfigure(self.circle_id, outline="red")
        else:
            self.canvas.itemconfigure(self.circle_id, outline="")


root = tk.Tk()
root.title("Galcon")
game = Game(root)
root.mainloop()
